// <auto-generated />
using System;
using FoodOrderingSystem.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FoodOrderingSystem.Migrations
{
    [DbContext(typeof(FoodOrderingContext))]
    [Migration("20250804064831_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FoodOrderingSystem.Models.Chef", b =>
                {
                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<string>("ShiftTime")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Specialty")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("UserID");

                    b.ToTable("Chefs");

                    b.HasData(
                        new
                        {
                            UserID = 3,
                            ShiftTime = "Day Shift",
                            Specialty = "Italian Cuisine"
                        });
                });

            modelBuilder.Entity("FoodOrderingSystem.Models.MenuItem", b =>
                {
                    b.Property<int>("ItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemID"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("ItemID");

                    b.ToTable("MenuItems");

                    b.HasData(
                        new
                        {
                            ItemID = 1,
                            Category = "Pizza",
                            Description = "Classic pizza with tomato sauce and mozzarella",
                            IsAvailable = true,
                            Name = "Margherita Pizza",
                            Price = 12.99m
                        },
                        new
                        {
                            ItemID = 2,
                            Category = "Pasta",
                            Description = "Creamy pasta with grilled chicken",
                            IsAvailable = true,
                            Name = "Chicken Pasta",
                            Price = 14.99m
                        },
                        new
                        {
                            ItemID = 3,
                            Category = "Salad",
                            Description = "Fresh romaine lettuce with caesar dressing",
                            IsAvailable = true,
                            Name = "Caesar Salad",
                            Price = 8.99m
                        },
                        new
                        {
                            ItemID = 4,
                            Category = "Main Course",
                            Description = "Fresh salmon with herbs and lemon",
                            IsAvailable = true,
                            Name = "Grilled Salmon",
                            Price = 18.99m
                        },
                        new
                        {
                            ItemID = 5,
                            Category = "Dessert",
                            Description = "Rich chocolate cake with frosting",
                            IsAvailable = true,
                            Name = "Chocolate Cake",
                            Price = 6.99m
                        });
                });

            modelBuilder.Entity("FoodOrderingSystem.Models.Order", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderID"));

                    b.Property<int?>("ChefID")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("TableID")
                        .HasColumnType("int");

                    b.Property<int>("TableNumber")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("WaiterID")
                        .HasColumnType("int");

                    b.HasKey("OrderID");

                    b.HasIndex("ChefID");

                    b.HasIndex("TableID");

                    b.HasIndex("WaiterID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("FoodOrderingSystem.Models.OrderItem", b =>
                {
                    b.Property<int>("OrderItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderItemID"));

                    b.Property<int>("ItemID")
                        .HasColumnType("int");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SpecialInstructions")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("OrderItemID");

                    b.HasIndex("ItemID");

                    b.HasIndex("OrderID");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("FoodOrderingSystem.Models.Table", b =>
                {
                    b.Property<int>("TableID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TableID"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("TableID");

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            TableID = 1,
                            Capacity = 2,
                            Status = "Available"
                        },
                        new
                        {
                            TableID = 2,
                            Capacity = 4,
                            Status = "Available"
                        },
                        new
                        {
                            TableID = 3,
                            Capacity = 6,
                            Status = "Available"
                        },
                        new
                        {
                            TableID = 4,
                            Capacity = 4,
                            Status = "Available"
                        },
                        new
                        {
                            TableID = 5,
                            Capacity = 2,
                            Status = "Available"
                        });
                });

            modelBuilder.Entity("FoodOrderingSystem.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserID");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserID = 1,
                            CreatedDate = new DateTime(2025, 1, 1, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Admin User",
                            Password = "admin123",
                            Role = "Manager",
                            Username = "admin"
                        },
                        new
                        {
                            UserID = 2,
                            CreatedDate = new DateTime(2025, 1, 1, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "John Waiter",
                            Password = "waiter123",
                            Role = "Waiter",
                            Username = "waiter1"
                        },
                        new
                        {
                            UserID = 3,
                            CreatedDate = new DateTime(2025, 1, 1, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Maria Chef",
                            Password = "chef123",
                            Role = "Chef",
                            Username = "chef1"
                        });
                });

            modelBuilder.Entity("FoodOrderingSystem.Models.Waiter", b =>
                {
                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<string>("ShiftTime")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Specialty")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("UserID");

                    b.ToTable("Waiters");

                    b.HasData(
                        new
                        {
                            UserID = 2,
                            ShiftTime = "Day Shift",
                            Specialty = "Customer Service"
                        });
                });

            modelBuilder.Entity("FoodOrderingSystem.Models.Chef", b =>
                {
                    b.HasOne("FoodOrderingSystem.Models.User", "User")
                        .WithOne()
                        .HasForeignKey("FoodOrderingSystem.Models.Chef", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodOrderingSystem.Models.Order", b =>
                {
                    b.HasOne("FoodOrderingSystem.Models.Chef", "Chef")
                        .WithMany("Orders")
                        .HasForeignKey("ChefID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("FoodOrderingSystem.Models.Table", "Table")
                        .WithMany("Orders")
                        .HasForeignKey("TableID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FoodOrderingSystem.Models.Waiter", "Waiter")
                        .WithMany("Orders")
                        .HasForeignKey("WaiterID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Chef");

                    b.Navigation("Table");

                    b.Navigation("Waiter");
                });

            modelBuilder.Entity("FoodOrderingSystem.Models.OrderItem", b =>
                {
                    b.HasOne("FoodOrderingSystem.Models.MenuItem", "MenuItem")
                        .WithMany("OrderItems")
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FoodOrderingSystem.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuItem");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("FoodOrderingSystem.Models.Waiter", b =>
                {
                    b.HasOne("FoodOrderingSystem.Models.User", "User")
                        .WithOne()
                        .HasForeignKey("FoodOrderingSystem.Models.Waiter", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodOrderingSystem.Models.Chef", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("FoodOrderingSystem.Models.MenuItem", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("FoodOrderingSystem.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("FoodOrderingSystem.Models.Table", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("FoodOrderingSystem.Models.Waiter", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
